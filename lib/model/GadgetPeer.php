<?php



/**
 * Skeleton subclass for performing query and update operations on the 'gadget' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Wed Jul 13 23:36:50 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class GadgetPeer extends BaseGadgetPeer {
  static protected
    $results,
    $configs = array(),
    $gadgets = array(),
    $gadgetConfigList = array();

  static public function getConfig()
  {
    if (!isset(self::$configs['config']))
    {
      self::$configs['config'] = include(sfContext::getInstance()
        ->getConfiguration()
        ->getConfigCache()
        ->checkConfig('config/gadget_config.yml'));
    }
    return self::$configs['config'];
  }

  static public function getGadgetLayoutConfig()
  {
    if (!isset(self::$configs['layout']))
    {
      self::$configs['layout'] = include(sfContext::getInstance()
        ->getConfiguration()
        ->getConfigCache()
        ->checkConfig('config/gadget_layout_config.yml'));
    }
    return self::$configs['layout'];
  }

  static public function getGadgetConfig($typesName)
  {
    if (!isset(self::$configs['gadget'][$typesName]))
    {
      $filename = 'config/'.sfinflector::underscore($typesName);
      if ($typesName != 'gadget')
      {
        $filename .= '_gadget';
      }
      $filename .= '.yml';

      $configCache = sfContext::getInstance()->getConfiguration()->getConfigCache();
      $configCache->registerConfigHandler($filename, 'opGadgetConfigHandler');
      self::$configs['gadget'][$typesName] = include($configCache->checkConfig($filename));
    }
    return self::$configs['gadget'][$typesName];
  }

  static protected function getTypes($typesName)
  {
    $types = array();
    $configs = self::getConfig();
    $layoutConfigs = self::getGadgetLayoutConfig();

    if (!isset($configs[$typesName]))
    {
      throw new Doctrine_Exception('Invalid types name');
    }
    if (isset($configs[$typesName]['layout']['choices']))
    {
      foreach ($configs[$typesName]['layout']['choices'] as $choice)
      {
        $types = array_merge($types, $layoutConfigs[$choice]);
      }
    }
    $types = array_merge($types, $layoutConfigs[$configs[$typesName]['layout']['default']]);
    $types = array_unique($types);

    if ($typesName !== 'gadget')
    {
      foreach ($types as &$type)
      {
        $type = $typesName.ucfirst($type);
      }
    }

    return $types;
  }

  static public function clearGadgetsCache()
  {
    $files = sfFinder::type('file')
      ->name('*_gadgets.php')
      ->in(sfConfig::get('sf_root_dir').'/cache');
    foreach ($files as $file)
    {
      @unlink($file);
    }
    self::$gadgets = array();
    self::$gadgetConfigList = array();
  }

  static public function retrieveGadgetsByTypesName($typesName)
  {
    if (isset(self::$gadgets[$typesName]))
    {
      return self::$gadgets[$typesName];
    }

    if (sfConfig::get('op_is_enable_gadget_cache', true))
    {
      $dir = sfConfig::get('sf_app_cache_dir').'/config';
      $file = $dir.'/'.sfInflector::underscore($typesName)."_gadgets.php";
      if (is_readable($file))
      {
        $results = unserialize(file_get_contents($file));
        self::$gadgets[$typesName] = $results;
        return $results;
      }
    }

    $types = self::getTypes($typesName);

    foreach($types as $type)
    {
      $results[$type] = self::retrieveByType($type);
    }

    if (sfConfig::get('op_is_enable_gadget_cache', true))
    {
      if (!is_dir($dir))
      {
        @mkdir($dir, 0777, true);
      }
      file_put_contents($file, serialize($results));
    }

    self::$gadgets[$typesName] = $results;

    return $results;
  }

  static public function retrieveByType($type)
  {
    $results = GadgetQuery::create()
      ->filterByType($type)
      ->orderBySortOrder()
      ->find();

    return (0 === count($results)) ? $results : null;
  }

  public function getGadgetsIds($type)
  {
    $_result = $this->createQuery()
      ->select('id')
      ->where('type = ?', $type)
      ->orderBy('sort_order')
      ->execute();

    $result = array();

    foreach ($_result as $value)
    {
      $result[] = $value->getId();
    }

    return $result;
  }

  protected function getResults()
  {
    if (empty($this->results))
    {
      $this->results = array();
      $objects = $this->createQuery()->orderBy('sort_order')->execute();
      foreach ($objects as $object)
      {
        $this->results[$object->type][] = $object;
      }
    }
    return $this->results;
  }

  public function getGadgetConfigListByType($type)
  {
    if (isset($this->gadgetConfigList[$type]))
    {
      return $this->gadgetConfigList[$type];
    }

    $configs = $this->getConfig();
    foreach ($configs as $key => $config)
    {
      if (in_array($type, $this->getTypes($key)))
      {
        $resultConfig = $this->getGadgetConfig($key);
        $this->gadgetConfigList[$type] = $resultConfig;
        return $resultConfig;
      }
    }

    $this->gadgetConfigList[$type] = array();
    return array();
  }

  public function appendRoles(Zend_Acl $acl)
  {
    return $acl
      ->addRole(new Zend_Acl_Role('anonymous'))
      ->addRole(new Zend_Acl_Role('everyone'), 'anonymous');
  }

  public function appendRules(Zend_Acl $acl, $resource = null)
  {
    $acl->allow('everyone', $resource, 'view');

    if (4 == $resource->getConfig('viewable_privilege'))
    {
      $acl->allow('anonymous', $resource, 'view');
    }

    return $acl;
  }
} // GadgetPeer
